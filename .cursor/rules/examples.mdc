---
description: 
globs: 
alwaysApply: false
---
---
id: global-store-examples
title: Global Store – Real Game Examples
version: 0.1.0
category: phaser-plugin
status: active
---

## 🎮 Real-World Usage by Genre

The goal of this file is to provide **copy-pastable state patterns** and examples for common game types.

Each section should show:

- 🧠 Recommended key structure
- 🧪 Real-world use cases
- 🛠 Working code examples (`set`, `get`, `onChange`)
- 💡 Optional pro tips

---

### 📖 Visual Novel

---

#### 🧠 Recommended Key Structure

```ts
flags.metInnkeeper = true
flags.readNoteFromSister = false
choices.chapter3 = 'forgive'
choices.log = ['intro.friendly', 'scene2.tease']
scene.endingChosen = 'betrayal'
settings.textSpeed = 'medium'
ui.hasSeenIntroTooltip = true
```

---

#### 🧪 Common Use Cases

- Track major and minor story branches
- Log player decisions for credits or reactivity
- Enable/disable dialogue or options based on past choices
- Gate scenes or endings behind flags
- Tweak settings and persistent UI state

---

#### 🛠 Example Code

```ts
// Mark a flag
globalStore.set('flags.readNoteFromSister', true);

// Save a major story choice
globalStore.set('choices.chapter3', 'forgive');

// Append to a log of player choices
const currentLog = globalStore.get('choices.log') ?? [];
globalStore.set('choices.log', [...currentLog, 'chapter3.forgive']);

// Watch for ending being chosen
globalStore.onChange('scene.endingChosen', (ending) => {
  if (ending === 'betrayal') {
    this.cameras.main.shake(300);
  }
});
```

---

#### 💡 Pro Tips

- Use `flags.` for binary decisions
- Use `choices.` for narrative branches and UI labels
- Log player paths into `choices.log[]` for analytics, recaps, or debugging
- Use `ui.` for tooltips and one-time visual interactions
- Avoid storing current character animations, timers, etc.

---

## 🗂️ Genres to Flesh Out Later

The following game types should each receive their own section, following the format above:

| Genre | Notes |
|-------|-------|
| 🧩 Block Puzzle | Boosters, powerups, level stars, coins, timers |
| 🏎 Racing Game | Cars unlocked, best times, controls config |
| ⚔️ Turn-based RPG | Quests, party HP, inventory, towns visited |
| 🗺 Metroidvania | Abilities unlocked, map rooms, key items |
| 🎮 Fighting Game | Character unlocks, input config, ranked stats |
| 👾 Roguelike | Meta progress, unlock trees, seed history |
| 📱 Mobile idle game | Global upgrades, ad timers, prestige count |
| 🎤 Rhythm Game | Song high scores, options, unlocked difficulties |
| 💬 Dating Sim | Affection levels, scenes seen, special flags |
| 🧠 Puzzle platformer | Level state, switches flipped, items collected |
| 👨‍👩‍👧 Family sim / builder | Resources, happiness, relationship meters |

---

## 🧠 Guiding Philosophy

The global store isn’t a database or logic system. It’s a simple in-memory state layer — perfect for tracking player progress, choices, and world state across scenes.

Use it like you’re structuring your game’s save file: clear, shallow, namespaced keys — nothing complex or deeply nested unless necessary.

"Design your keys like save data" = Use the same structure you’d expect in a save file:

✅ Good:

```ts
player.hp = 100
player.inventory = ['sword', 'key']
world.rooms.cleared = ['hallway']
```

❌ Bad:

```ts
animationState.current = 'idle' // scene-specific
player.logicClass = new Player() // non-serializable
tempFlags.clearTooltip = true // one-off local flag
```

---
