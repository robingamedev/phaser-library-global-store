---

id: global-store-example-farming-sim
title: Global Store – Example: Farming Sim
description: How to use global-store for farming/life sims with crops, animals, weather, routines, and unlocks.
version: 0.2.4
category: phaser-plugin
status: active

---

## 🌾 Farming Sim – Example Usage

This example demonstrates how to manage **daily life**, **crop care**, **animal tracking**, **calendar-based events**, and **player stats** using global-store.

Inspired by games like *Harvest Moon*, *Story of Seasons*, and *Coral Island*, it emphasizes clean separation between **persistent state** (`meta.*`, `player.*`, `farm.*`) and **resettable session flags** (`scene.*`, `daily.*`).

---

### 🧠 Recommended Key Structure

```ts
// 📦 Meta (unlocked systems, upgrades, name)
meta = {
  slotId: 2,
  playerName: 'Willow',
  farmName: 'Silverroot',
  houseUpgrades: ['kitchen'],
  toolUnlocks: ['axe', 'fishingRod'],
  cropUnlocks: ['turnip', 'carrot'],
  animalTypes: ['chicken', 'cow']
};

// 📆 Calendar / Daily Status
calendar = {
  season: 'spring',
  day: 6,
  year: 1,
  weather: 'rain', // 'sun', 'rain', 'storm', 'snow'
  festivalToday: null // or 'springFestival'
};

// 🧍 Player Stats
player = {
  coins: 420,
  energyMax: 100,
  energyCurrent: 68,
  hearts: 5,
  stamina: 84
};

// 🌱 Farm Plots
farm = {
  plots: {
    '1': { crop: 'turnip', growthStage: 3, watered: true },
    '2': { crop: null, growthStage: 0, watered: false },
    '3': { crop: 'carrot', growthStage: 1, watered: false }
  }
};

// 🐄 Animals
barn = {
  animals: {
    'cow01': { type: 'cow', name: 'MooMoo', fed: true, affection: 12 },
    'chicken01': { type: 'chicken', name: 'Cluckles', fed: false, affection: 5 }
  }
};

// 🎒 Inventory
inventory = {
  seeds: { turnip: 5, carrot: 2 },
  crops: { turnip: 4 },
  resources: { wood: 18, stone: 9 },
  tools: { hoe: 1, wateringCan: 0, axe: 1 }
};

// 🧑‍🤝‍🧑 NPC Relationships
npcAffinity = {
  clara: 27,
  bo: 11,
  mayor: 43
};

// 🎯 Daily Flags (reset per day)
daily = {
  petDog: false,
  visitedShop: false,
  cookedToday: true
};

// 🎭 Scene Visit Flags
scene = {
  farm: { visited: true },
  barn: { cutsceneSeen: true },
  village: { cutsceneSpringFestival: false }
};
```

---

### 🌿 Crop Watering & Growth

```ts
// Water crop 3
globalStore.set('farm.plots.3.watered', true);

// Daily reset
globalStore.set('farm.plots.1.watered', false);
globalStore.set('farm.plots.2.watered', false);
globalStore.set('farm.plots.3.watered', false);
```

---

### 🐓 Animal Feeding & Affection

```ts
// Feed chicken
globalStore.set('barn.animals.chicken01.fed', true);

// Increase affection
const affection = globalStore.get('barn.animals.chicken01.affection');
globalStore.set('barn.animals.chicken01.affection', affection + 1);
```

---

### 🌦️ Weather Triggers

```ts
// React to weather
globalStore.onChange('calendar.weather', (type) => {
  if (type === 'storm') disableOutdoorEvents();
});
```

---

### 🛍️ Unlock Triggers

```ts
// Unlock carrot seeds when turnips harvested ≥ 10
globalStore.onChange('inventory.crops.turnip', (val) => {
  if (val >= 10) {
    const unlocked = globalStore.get('meta.cropUnlocks');
    if (!unlocked.includes('carrot')) {
      globalStore.set('meta.cropUnlocks', [...unlocked, 'carrot']);
    }
  }
});
```

---

### 💝 NPC Affinity System

```ts
// Gift to Clara
const score = globalStore.get('npcAffinity.clara');
globalStore.set('npcAffinity.clara', score + 5);

// Unlock relationship event
globalStore.onChange('npcAffinity.clara', (val) => {
  if (val >= 40) unlockCutscene('claraBench');
});
```

---

### 🔁 Daily Reset Pattern

```ts
// Reset daily flags
globalStore.set('daily.petDog', false);
globalStore.set('daily.visitedShop', false);
globalStore.set('daily.cookedToday', false);

// Reset watering
Object.entries(globalStore.get('farm.plots')).forEach(([id]) => {
  globalStore.set(`farm.plots.${id}.watered`, false);
});

// Reset animal fed status
Object.entries(globalStore.get('barn.animals')).forEach(([id]) => {
  globalStore.set(`barn.animals.${id}.fed`, false);
});
```

---

### 🧪 Delete Example

```ts
// Cow sold
globalStore.delete('barn.animals.cow01');
```

---

### 💡 Design Tips

* Use `meta.*` for unlocked content, upgrades, and IDs
* Reset `daily.*`, `farm.plots.*.watered`, and `barn.animals.*.fed` every in-game morning
* Separate player stats (`player.energy`, `player.coins`) from meta and inventory
* Animals should have unique IDs and tracked affection
* Use `calendar.*` to drive seasonal or event-based systems

> ✅ Pair with `save-kit` by calling `.dump()` for saves, `.reset()` for slot switching

---

### 🧠 Object Schema Examples

#### 🌱 Farm Plot

```ts
farm.plots = {
  '1': { crop: 'turnip', growthStage: 3, watered: true }
};
```

#### 🐮 Animal Definition

```ts
barn.animals = {
  cow01: { type: 'cow', name: 'MooMoo', fed: true, affection: 12 }
};
```

#### 🌦️ Calendar

```ts
calendar = {
  day: 6, season: 'spring', year: 1, weather: 'rain', festivalToday: null
};
```

---

### ✅ Plugin Alignment Table

| Rule                   | Coverage                                     |
| ---------------------- | -------------------------------------------- |
| Meta vs session state  | ✅ Split across `meta.*`, `calendar.*`, `daily.*` |
| Atomic updates         | ✅ `.set()` used for everything               |
| Object schemas         | ✅ Crops, animals, player, calendar shown     |
| Save integration ready | ✅ Compatible with `dump()` and `reset()`     |
| Event reactivity       | ✅ Crop unlocks, affinity gates, weather triggers |

---

### 🔗 See Also

* `example-turn-based-rpg.mdc` for combat and quest flags
* `example-roguelite.mdc` for meta vs run separation
* `anti-patterns.mdc` for mutation warnings and best practices
```
