---
id: global-store-example-turn-based-rpg
title: Global Store – Example: Turn-Based RPG
version: 0.2.2
category: phaser-plugin
status: active
---

## ⚔️ Turn-Based RPG – Example Usage

This example demonstrates how to structure persistent state for a classic turn-based RPG, inspired by NES-era games like *Dragon Quest*.

---

### 🧠 Recommended Key Structure

```ts
player.name = 'Erdrick'
player.level = 16
player.xp = 3450
player.class = 'Hero'
player.checkpoint = 'Tantagel Castle'

player.equipment = {
  weapon: 'Copper Sword',
  armor: 'Chainmail',
  shield: 'Leather Shield'
}

party.members = [
  {
    id: 'hero',
    name: 'Erdrick',
    level: 16,
    hp: 52,
    mp: 20,
    status: 'healthy',
    skills: ['Heal', 'Fireball']
  },
  {
    id: 'prince',
    name: 'Kain',
    level: 14,
    hp: 45,
    mp: 32,
    status: 'poisoned',
    skills: ['Heal', 'Defend']
  }
]

inventory.gold = 912
inventory.items = [
  { id: 'herb', qty: 3 },
  { id: 'torch', qty: 1 }
]

quests.active = ['goblinCaves']
quests.completed = ['intro/tutorial']

world.towns.visited = ['Tantagel', 'Garinham']
world.chestsOpened = ['cave.1']
world.npcs.interacted = ['oldManBridge']

flags.shop.unlocked = true
bosses.defeated = ['greenDragon']
```

---

### 🪪 Common Use Cases

- Track long-term player stats and progression
- Save party composition, HP, MP, and equipment between scenes
- Manage quests and world triggers (doors, chests, shops)
- Unlock interactions and upgrades using boolean flags
- Persist checkpoint save locations

---

### 🛠 Code Examples

#### 🌟 Gaining XP and Leveling Up

```ts
const currentXP = globalStore.get('player.xp') ?? 0;
const newXP = currentXP + 150;
globalStore.set('player.xp', newXP);

if (newXP >= 4000) {
  globalStore.set('player.level', 17);
}
```

#### 🏛 Unlocking a Shop

```ts
globalStore.set('flags.shop.unlocked', true);

if (!globalStore.get('flags.shop.unlocked')) {
  this.scene.start('LockedShopMessage');
}
```

#### 🗺 Visiting a New Town

```ts
const visited = globalStore.get('world.towns.visited') ?? [];
if (!visited.includes('bramblewood')) {
  globalStore.set('world.towns.visited', [...visited, 'bramblewood']);
}
```

#### 📜 Completing a Quest

```ts
const completed = globalStore.get('quests.completed') ?? [];
globalStore.set('quests.completed', [...completed, 'witchTrial']);

const allDone = completed.includes('goblinCaves') && completed.includes('witchTrial');
if (allDone) {
  globalStore.set('flags.bossGateUnlocked', true);
}
```

---

### 💡 Pro Tips

- Always use **atomic replacements** when updating nested objects or arrays
- Replace the entire `party.members[]` array when a character changes
- Use `npc.*` or `world.*` for interaction flags and exploration state
- Avoid tracking temporary status like `battleTurn` or `isDefending` in the global store

---

### ✅ Alignment with Plugin Rules

| Rule | Alignment |
|------|-----------|
| **Scoped** | ✅ Uses grouped namespaces for `player`, `party`, `quests`, `world`, etc. |
| **Minimalist** | ✅ Only persistent state, no animations or per-frame battle logic |
| **Flexible** | ✅ Tracks exploration, questing, upgrades, and meta-progress |
| **TypeScript-friendly** | ✅ Structure works well with plain object types |
| **No runtime bloat** | ✅ All updates are explicit; no proxies or deep listeners |
| **No deep mutation risk** | ✅ All changes use object/array replacement |

---

### 🔗 See Also

- `usage.mdc` for full API reference
- `examples.mdc` for other game genres
- `anti-patterns.mdc` for warnings and common misuses

