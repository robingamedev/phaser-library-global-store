---

id: global-store-example-turn-based-rpg
title: Global Store – Example: Turn-Based RPG
description: How to use global-store for party-based RPGs with persistent meta and combat state.
version: 0.2.4
category: phaser-plugin
status: active
--------------

## ⚔️ Turn-Based RPG – Example Usage

This example covers how to manage **persistent meta-state** (stats, progress, quests) and **ephemeral combat state** in a traditional JRPG-style game (e.g., Dragon Quest, Final Fantasy).

It emphasizes proper scoping between long-term progression and battle-only state.

---

### 🧠 Recommended Key Structure

```ts
// 📦 Meta progression (permanent)
meta = {
  gold: 1200,
  items: ['potion', 'ether'],
  completedQuests: ['banditHideout'],
  world: {
    exploredTiles: ['town1', 'forest4', 'caveEntrance']
  }
};

// 🧙 Party definition (by ID)
party = ['hero', 'mage'];

partyMembers = {
  hero: {
    name: 'Aeron',
    hp: 35,
    hpMax: 40,
    atk: 12,
    def: 6,
    level: 7,
    xp: 480,
    equipped: {
      weapon: 'bronze-sword',
      armor: 'leather-mail',
      accessory: 'luck-charm'
    }
  },
  mage: {
    name: 'Mira',
    hp: 20,
    hpMax: 25,
    atk: 5,
    def: 2,
    level: 6,
    xp: 420,
    equipped: {
      weapon: 'oak-staff',
      armor: 'robe',
      accessory: null
    }
  }
};

// ⚔️ Active battle state (ephemeral)
battle = {
  enemy: 'goblin',
  enemyHp: 18,
  turn: 3,
  lastAction: 'mage-cast-fireball'
};

// 📦 Save metadata (optional)
saveMeta = {
  location: 'Cave of Echoes',
  chapter: '2 – Into Darkness',
  playtime: 4821 // seconds
};
```

---

### 💥 Combat Interaction Example

```ts
const targetHp = globalStore.get('battle.enemyHp');
globalStore.set('battle.enemyHp', targetHp - 5);
```

```ts
// Reset after battle ends
globalStore.delete('battle');
```

---

### 💊 Inventory Example

```ts
const items = globalStore.get('meta.items');
globalStore.set('meta.items', [...items, 'revive']);
```

---

### 🔁 Tracking Quest Completion

```ts
const quests = globalStore.get('meta.completedQuests');
globalStore.set('meta.completedQuests', [...quests, 'hauntedLibrary']);
```

---

### 🔔 Reactive Triggers

```ts
// Unlock shop after gold reaches 1000
globalStore.onChange('meta.gold', (newVal) => {
  if (newVal >= 1000) openShop();
});

// Trigger cutscene when town is visited
globalStore.onChange('meta.world.exploredTiles', (tiles) => {
  if (tiles.includes('town2')) launchCutscene('arrival-town2');
});

// React to active quest updates
globalStore.onChange('meta.completedQuests', (quests) => {
  if (quests.includes('hauntedLibrary')) enableRewardDialogue();
});
```

---

### 💡 Design Tips

* Use `meta.*` for long-term state and save/load
* Use `battle.*` for temporary combat context only
* Always use **array/object replacements** for updates
* Track party members by ID for easier swapping and healing
* Don’t store scene-specific variables (like positions or camera) unless they’re relevant to persistence

> ✅ Use `dump()` before saving, and `reset()` to restore game state from a file

---

### 🧠 Object Schema Examples

#### 🧙 Party Members

```ts
party = ['hero', 'mage'];

partyMembers = {
  hero: {
    name: 'Aeron', hp: 35, hpMax: 40, atk: 12, def: 6,
    level: 7, xp: 480,
    equipped: { weapon: 'bronze-sword', armor: 'leather-mail', accessory: 'luck-charm' }
  },
  mage: {
    name: 'Mira', hp: 20, hpMax: 25, atk: 5, def: 2,
    level: 6, xp: 420,
    equipped: { weapon: 'oak-staff', armor: 'robe', accessory: null }
  }
};
```

#### 📦 Meta Progress

```ts
meta = {
  gold: 1200,
  completedQuests: ['introVillage'],
  items: ['potion', 'bomb'],
  world: {
    exploredTiles: ['town1', 'forest4', 'caveEntrance']
  }
};
```

#### ⚔️ Battle State

```ts
battle = {
  enemy: 'orc-brute',
  enemyHp: 32,
  turn: 4
};
```

---

### ✅ Plugin Alignment Table

| Rule                   | Coverage                                     |
| ---------------------- | -------------------------------------------- |
| Meta vs session state  | ✅ `meta.*` vs `battle.*` separation          |
| Atomic updates         | ✅ Uses array spreads and replacements        |
| Object schemas         | ✅ Rich examples for party, equipment, quests |
| Save integration ready | ✅ `dump()` and `reset()` implied             |
| Event reactivity       | ✅ `onChange()` for cutscenes and quest flags |

---

### 🔗 See Also

* `example-visual-novel.mdc` for branching flags and affinity
* `example-deckbuilder.mdc` for card tracking and transient matches
* `anti-patterns.mdc` for bad practices around in-place mutation
