---
description: 
globs: 
alwaysApply: true
---
---
id: global-store-todo
title: Global Store – Roadmap & TODO
version: 0.2.2
category: phaser-plugin
status: active
---

## 🧭 PHASE 1 – Planning & Scope

- [x] Define plugin responsibilities (singleton, in-memory, dev-managed)
- [x] Confirm namespace style and nested key access
- [x] Decide not to auto-persist — devs control export/import
- [x] Decide to support `onChange()` and `offChange()` for key listeners
- [x] Lock in core API: `set`, `get`, `has`, `delete`, `reset`, `dump`
- [x] Clarify plugin relationship with `save-kit` (complementary, not overlapping)

---

## 🧱 PHASE 2 – Core Plugin Development

- [ ] Implement singleton store module
- [ ] Support nested key paths (e.g., `scene.title.fadeOut`)
- [ ] Implement `set`, `get`, `has`, `delete`
- [ ] Implement `reset(obj)` and `dump()`
- [ ] Add `onChange(key, callback)` observer system
- [ ] Add `offChange(key, callback)` unsubscribe method
- [ ] Only trigger callback if value changes (`!==`)
- [ ] Write unit tests for all core methods
- [ ] Write plugin in TypeScript with type-safe public API
- [ ] Export proper types via `index.d.ts` or inline with ESM bundle
- [ ] Add `configure({ strictMode })` support
- [ ] Enforce rules for invalid key formats
- [ ] Block reserved keys like `__proto__`
- [ ] Unit tests for both strict + silent modes
- [ ] Validate keys in `strictMode`
- [ ] Block empty string, bad dot patterns
- [ ] Warn on extreme nesting depth
- [ ] Validate and block dangerous root-level keys (`__proto__`, `constructor`, `prototype`)
- [ ] Include TypeScript types for all public methods and listener signatures

---

## 📘 PHASE 3 – Documentation

- [ ] Write `README.md` for GitHub/NPM
  - [ ] Installation instructions
  - [ ] Singleton import pattern
  - [ ] `set`, `get`, `has`, `reset`, `dump` examples
  - [ ] Mention `strictMode` and key structure
  - [ ] Add FAQ: “Why not use Phaser Registry or Redux?”
  - [ ] Add example of using `globalStore.dump()` + `reset()` with save-kit

- [ ] Add “Quick Start” section to `README.md`
  - [ ] 10-line usable example with `set`, `get`, `onChange`
  - [ ] Should be visible early in the README

- [ ] `usage.mdc`: Document public API + strict mode behavior
  - [ ] Full method signatures
  - [ ] Edge case examples (`undefined`, invalid keys)
  - [ ] Developer responsibility for cleanup (`offChange`)
- [ ] Add “bulk cleanup pattern” for scenes with many listeners

- [ ] Add “Common Pitfalls FAQ” to `usage.mdc`
  - [ ] Why `onChange` doesn’t trigger
  - [ ] Why `offChange` is necessary
  - [ ] Debugging strange reactivity issues


- [ ] `examples.mdc`: Real game genre patterns
  - [ ] For each genre, show:
    - [ ] 🧠 Recommended key structure
    - [ ] 🧪 Realistic use cases
    - [ ] 🛠 Code examples (`set`, `get`, `onChange`)
    - [ ] 💡 Optional “pro tips” per genre
  - [ ] Goal: A developer should be able to say:
    > “Ah — my game is like this. I’ll copy that pattern.”

- [ ] `anti-patterns.mdc`: Warnings and misuses
  - [ ] At least 5 examples with fixes
  - [ ] Encourage structure, cleanup, and proper scope

- [ ] Add “Dev Patterns” folder in demo project
  - [ ] Optional: Create one Phaser scene per genre pattern in `examples.mdc`
  - [ ] Helps serve as live docs



---

## 🧪 PHASE 4 – Demo Project: "The Camp and the Shrine"

- [ ] Scene: **Campfire**
  - Modify `player.name`, `settings.audio.muted`
  - View/edit `player.inventory`
  - “Sleep” button sets `player.hp = 100`
  - “Enter Shrine” button transitions to Shrine scene

- [ ] Scene: **Shrine Interior**
  - Simulate enemy combat → damages `player.hp` every 2s
  - Uses `onChange()` to update UI
  - Unlock a door if `player.inventory.includes('old_key')`
  - Sets `world.shrine.secretRoomUnlocked = true`
  - Button: Return to Campfire

- [ ] Scene: **Shrine Secret Room**
  - Only accessible if `world.shrine.secretRoomUnlocked === true`
  - Reward: Adds `amulet` to `player.inventory`
  - Shows full `globalStore.dump()` state

- [ ] Global Debug Overlay (optional)
  - Shows `globalStore.dump()` as JSON
  - Logs every triggered `onChange()` with timestamps



## 🔮 Future Ideas and Enhancements



### Integration
- [ ] Optional Phaser Scene mixin for auto cleanup of listeners

### Documentation
- [ ] Performance benchmarks with 100, 1K, and 10K keys


