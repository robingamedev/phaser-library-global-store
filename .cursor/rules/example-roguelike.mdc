---

id: global-store-example-roguelite
title: Global Store – Example: Roguelite
description: How to use global-store for roguelites with run resets, unlock trees, death logs, modifiers, and permanent upgrades.
version: 0.2.4
category: phaser-plugin
status: active

---

## 🌀 Roguelite – Example Usage

This example shows how to separate **permanent meta progression** from **run-specific state**, using the global-store for:

- Unlock tracking (characters, relics, areas)
- Conditional bosses and modifiers
- Meta currencies and upgrade trees
- Legacy run history
- Reactive triggers and event flags

Inspired by *Hades*, *Slay the Spire*, and *Dead Cells*, it emphasizes **clean separation**, **atomic updates**, and **ID-driven systems**.

---

### 🧠 Recommended Key Structure

```ts
// 💾 Meta Progression
meta = {
  unlockedCharacters: ['warrior', 'archer'],
  unlockedAreas: ['graveyard', 'crypt'],
  unlockedRelics: ['soul-orb', 'revive-charm'],
  permanentStats: {
    hpBoost: 2,
    startingGold: 150
  },
  shrineChoices: {
    favor: 'speed',
    curse: 'darkness'
  },
  metaCurrency: {
    soulAsh: 14,
    voidKeys: 2
  },
  upgradeTree: {
    extraDash: true,
    lifesteal: false,
    altarAccess: true
  },
  bestDepth: 12,
  legacyRuns: [
    { character: 'archer', depth: 10, cause: 'slime', gold: 94, seed: 'abc-812' },
    { character: 'warrior', depth: 12, cause: 'specter', gold: 112, seed: 'ggx-120' }
  ],
  deathsByEnemy: {
    'slime': 4,
    'shadow-witch': 2
  }
};

// 🧍 Run State (reset every new run)
run = {
  seed: 'xyz-301',
  character: 'archer',
  depth: 4,
  hp: 9,
  gold: 76,
  inventory: ['bow', 'smoke-bomb'],
  relics: ['revive-charm'],
  buffs: ['quickshot'],
  debuffs: ['bleed'],
  eventFlags: {
    foundWishingWell: true,
    helpedMushroomKing: false
  },
  bossModifiers: ['rage', 'shroud'],
  activeBoss: 'bone-lord'
};

// 📦 Save Metadata
saveMeta = {
  slotId: 1,
  createdAt: 1720568211,
  lastPlayed: 1720680000
};
```

---

### 💥 Combat + Inventory

```ts
// Take damage
globalStore.set('run.hp', Math.max(0, globalStore.get('run.hp') - 4));

// Add item to inventory
const inv = globalStore.get('run.inventory');
globalStore.set('run.inventory', [...inv, 'smoke-bomb']);
```

---

### 🔁 Run Reset with Seeding

```ts
globalStore.delete('run');

globalStore.set('run', {
  seed: createRandomSeed(),
  character: 'warrior',
  depth: 1,
  hp: 12,
  gold: globalStore.get('meta.permanentStats.startingGold'),
  inventory: ['sword'],
  relics: [],
  buffs: [],
  debuffs: [],
  eventFlags: {},
  bossModifiers: [],
  activeBoss: null
});
```

---

### 🔓 Unlocks & Meta Currency

```ts
// Unlock relic
const relics = globalStore.get('meta.unlockedRelics');
globalStore.set('meta.unlockedRelics', [...relics, 'mirror-shard']);

// Spend soul ash
const ash = globalStore.get('meta.metaCurrency.soulAsh');
globalStore.set('meta.metaCurrency.soulAsh', ash - 5);
```

---

### 🧬 Upgrade Tree

```ts
// Buy altar access upgrade
globalStore.set('meta.upgradeTree.altarAccess', true);

// Check for optional branches
if (!globalStore.get('meta.upgradeTree.lifesteal')) {
  enableUpgradePreview('lifesteal');
}
```

---

### 🔥 Conditional Boss Unlocks & Modifiers

```ts
// Boss modifier: enable 'rage' if player has extraDash and favor is 'speed'
const upgrades = globalStore.get('meta.upgradeTree');
const favor = globalStore.get('meta.shrineChoices.favor');

if (upgrades.extraDash && favor === 'speed') {
  globalStore.set('run.bossModifiers', ['rage']);
}
```

```ts
// Activate final boss after specific areas
const areas = globalStore.get('meta.unlockedAreas');
if (areas.includes('graveyard') && areas.includes('crypt')) {
  globalStore.set('run.activeBoss', 'bone-lord');
}
```

---

### 📜 Track Legacy Run

```ts
const past = globalStore.get('meta.legacyRuns');
const last = {
  character: globalStore.get('run.character'),
  depth: globalStore.get('run.depth'),
  gold: globalStore.get('run.gold'),
  cause: 'specter',
  seed: globalStore.get('run.seed')
};

globalStore.set('meta.legacyRuns', [...past.slice(-19), last]); // Keep last 20 runs
```

---

### 💀 Death Tracking

```ts
const deaths = globalStore.get('meta.deathsByEnemy.shadow-witch') || 0;
globalStore.set('meta.deathsByEnemy.shadow-witch', deaths + 1);
```

---

### 🔔 Reactive Depth Tracker

```ts
globalStore.onChange('run.depth', (val) => {
  if (val > globalStore.get('meta.bestDepth')) {
    globalStore.set('meta.bestDepth', val);
  }
});
```

---

### 💡 Design Tips

* Use `meta.*` for everything persistent — currency, relics, characters, stats
* Use `run.*` for each loop (reset every time)
* Keep `bossModifiers` and `activeBoss` in `run.*` to support dynamic changes
* Track previous runs using a capped array in `meta.legacyRuns`
* Avoid storing “unlocked” booleans — use ID arrays or object keys

> ✅ Use `.dump()` for saving meta; reset `run.*` at the start of every session

---

### 🧠 Object Schema Examples

#### 🔒 Meta Unlocks

```ts
meta = {
  unlockedCharacters: ['archer'],
  unlockedRelics: ['dash-stone'],
  unlockedAreas: ['graveyard', 'crypt']
};
```

#### 🧍 Run Data

```ts
run = {
  seed: 'abc-921',
  character: 'archer',
  depth: 3,
  hp: 7,
  gold: 42,
  inventory: ['bow'],
  bossModifiers: ['rage'],
  activeBoss: 'shadow-witch'
};
```

#### 🧬 Upgrade Tree

```ts
upgradeTree = {
  altarAccess: true,
  extraDash: true,
  lifesteal: false
};
```

#### 📜 Legacy Run

```ts
legacyRuns = [
  { character: 'monk', depth: 12, cause: 'gorgon', gold: 101, seed: 'mmx-222' }
];
```

---

### ✅ Plugin Alignment Table

| Rule                   | Coverage                                     |
| ---------------------- | -------------------------------------------- |
| Meta vs session state  | ✅ `meta.*` vs `run.*` clearly separated      |
| Atomic updates         | ✅ All state modified via `.set()`            |
| Object schemas         | ✅ Multiple: run, upgradeTree, logs, relics   |
| Save integration ready | ✅ Fully compatible with `dump()` / `reset()` |
| Event reactivity       | ✅ Boss gates, depth unlocks, shrine effects  |

---

### 🔗 See Also

* `example-turn-based-rpg.mdc` for party systems
* `example-deckbuilder.mdc` for card pools and hand tracking
* `anti-patterns.mdc` for state misuse and mutation warnings
```

