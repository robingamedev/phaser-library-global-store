---

id: global-store-antipatterns
title: Global Store – Anti-Patterns
description: Common mistakes when using global-store and how to fix them.
version: 0.2.4
category: phaser-plugin
status: active

---

## 🚫 Global Store – Common Anti-Patterns

This file documents common **misuses of global-store** that lead to bugs, state corruption, or unreadable structure.

Each anti-pattern includes a **before** (bad) and **after** (recommended) example using real-world use cases from farming sims, deckbuilders, RPGs, and roguelites.

---

### 🧱 1. In-Place Mutation of Nested Objects

Avoid modifying nested structures after `.get()`. It **breaks reactivity** and creates stale data.

#### 🚫 Bad

```ts
const player = store.get('player');
player.hp -= 5; // ← No .set() call — store never updates
```

#### ✅ Good

```ts
const hp = store.get('player.hp');
store.set('player.hp', hp - 5);
```

---

### 🪣 2. Overwriting Parent Objects Without Merging

Don't overwrite a nested object (e.g. `inventory`) unless you intend to **replace the entire thing**. This can wipe unrelated keys.

#### 🚫 Bad

```ts
store.set('inventory', { wood: 10 }); // ← Deletes all other inventory keys
```

#### ✅ Good

```ts
const inv = store.get('inventory');
store.set('inventory', { ...inv, wood: 10 });
```

Or better:

```ts
store.set('inventory.wood', 10);
```

---

### 🔥 3. Flat Sprawl Keys Instead of Namespacing

Avoid unstructured keys like `playerHP` or `goldCount`. Use **dot-paths** to group related data.

#### 🚫 Bad

```ts
store.set('playerHP', 40);
store.set('itemList', ['apple', 'potion']);
```

#### ✅ Good

```ts
store.set('player.hp', 40);
store.set('inventory.items', ['apple', 'potion']);
```

---

### 🧩 4. Boolean Unlock Flags Instead of ID Arrays

Avoid `hasRelicX` or `hasCardY` flags. They don’t scale. Use **ID-based arrays** to track unlocks.

#### 🚫 Bad

```ts
store.set('meta.hasSwordRelic', true);
store.set('meta.hasFocusCard', true);
```

#### ✅ Good

```ts
store.set('meta.unlockedRelics', ['sword-relic']);
store.set('meta.collection.focus', 1);
```

---

### 🌀 5. Storing Scene-Local State in Global Store

Global store is not for **camera position**, **NPC animation frames**, or **tween references**.

#### 🚫 Bad

```ts
store.set('scene.camera.x', camera.scrollX);
store.set('dialogAnimation.activeTween', tween);
```

#### ✅ Good

Only store **serializable game state**:
```ts
store.set('scene.village.cutsceneSeen', true);
```

> Use **scene-level variables or class fields** for ephemeral, non-persistent state.

---

### 💾 6. Storing Entire Card or Item Objects

Avoid storing full object blobs in the store. Keep data elsewhere and store only **references by ID**.

#### 🚫 Bad

```ts
store.set('match.deck', [
  { id: 'strike', cost: 1, damage: 6 },
  { id: 'defend', cost: 1, block: 5 }
]);
```

#### ✅ Good

```ts
store.set('match.deck', ['strike', 'defend']);
```

> Look up card metadata in your static card catalog.

---

### 🔁 7. Forgetting to Reset Temporary State

If your game has temporary phases (battles, matches, farming days), don’t forget to **clear or reset** that state.

#### 🚫 Bad

```ts
// Starting a new run
store.set('run.depth', 1); // ← Doesn’t clear old values
```

#### ✅ Good

```ts
store.delete('run');
store.set('run', { depth: 1, inventory: [], relics: [] });
```

---

### 📚 Summary of Best Practices

| Rule                         | ✅ Do This                     |
|------------------------------|-------------------------------|
| Organize with dot-paths      | `player.hp`, `scene.village.*` |
| Use atomic updates           | Always use `.set()` with a new value |
| Avoid in-place mutation      | Never change `.get()` results directly |
| Track unlocks by ID          | Use arrays/maps, not flags     |
| Reset transient state        | `delete('battle')`, `delete('match')` |
| Store references, not blobs  | Use IDs, not full objects      |

---

### 🔗 See Also

* `example-turn-based-rpg.mdc` for combat session patterns
* `example-deckbuilder.mdc` for quantity-based card systems
* `usage.mdc` for `.set`, `.get`, `.onChange` API details
* `overview.mdc` for plugin design goals
```

