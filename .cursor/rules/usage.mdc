---

id: global-store-usage
title: Global Store – Usage Guide
description: API reference and best practices for using global-store in Phaser projects.
version: 0.2.5
category: phaser-plugin
status: active

---

## 🧰 Global Store – Usage Guide

This file covers how to use the `global-store` plugin in your Phaser game.

It assumes you’ve already created an instance:

```ts
import GlobalStore from '@robingamedev/global-store';

const store = new GlobalStore();
```

---

## 🔑 `.set(key, value)`

Set a value using a **dot-path string**.

```ts
store.set('player.hp', 42);
store.set('inventory.resources.wood', 18);
```

### ✅ Best Practice

Use structured dot-paths for grouping:

```ts
store.set('meta.unlockedAreas', ['graveyard', 'crypt']);
```

### ❌ Anti-Pattern

```ts
// Avoid overwriting the whole object unless intentional
store.set('inventory', { wood: 5 }); // ← Will delete all other keys
```

---

## 🔍 `.get(key)`

Retrieve a value using the same path.

```ts
const hp = store.get('player.hp');
```

### ⚠️ Warning

Avoid modifying the returned object directly:

```ts
const stats = store.get('player');
// ❌ Don't mutate: stats.hp -= 10
// ✅ Instead:
store.set('player.hp', store.get('player.hp') - 10);
```

---

## 🔁 `.onChange(key, callback)`

Run a function whenever the value changes.

```ts
store.onChange('player.hp', (newVal) => {
  if (newVal <= 0) triggerGameOver();
});
```

You can track:

- Number changes (e.g. health, currency)
- Boolean flags (e.g. `cutscenePlayed`)
- Array updates (e.g. unlocked items)
- Nested keys (e.g. `scene.village.visited`)

---

## 🧹 `.delete(key)`

Remove a key and its value entirely.

```ts
store.delete('match');
store.delete('farm.plots.3.watered');
```

Useful for resetting combat, match state, draft decks, etc.

---

## 💾 `.dump()` and `.reset()`

Use `.dump()` to save everything, and `.reset()` to clear all state.

```ts
const snapshot = store.dump(); // Save to file
store.reset();                 // Wipe current store
```

When paired with `save-kit`, this gives full save/load capability.

---

## ⚙️ `.configure(options)`

Enable optional dev-time behaviors or enforcement settings.

```ts
store.configure({
  warnOnMutation: true,
  strictMode: true
});
```

### Options

| Option             | Description |
|--------------------|-------------|
| `warnOnMutation`   | Logs a warning if `.get()` is called but `.set()` never follows (helpful during dev) |
| `strictMode`           | Disallows setting/getting undefined paths. Helps catch typos and invalid keys. |

> These are dev-mode helpers. Leave off in production builds.

---

## 📦 Suggested Namespaces

Organize your keys for long-term maintainability:

| Namespace | Purpose |
|-----------|---------|
| `meta.*`  | Persistent unlocks, stats, upgrades |
| `player.*` | HP, coins, energy |
| `match.*` or `run.*` | Temporary battle/draft data |
| `inventory.*` | Resources, crops, items |
| `npcAffinity.*` | Relationship values |
| `farm.plots.*` | Crop layouts by ID |
| `scene.*` | Visited flags, cutscenes |
| `daily.*` | Per-day reset flags |

---

## 🔌 Integration Features

### 💾 Save/Load with `save-kit`

Global Store supports full save/load cycles using `.dump()` and `.reset()`:

```ts
const snapshot = store.dump(); // Save snapshot
store.reset();                 // Clear current state
store.load(snapshot);          // Restore previous state
```

For full autosave/bookmark handling, pair with [`@robingamedev/save-kit`](https://github.com/robingamedev/save-kit).

---

### 🚨 Strict Mode (Optional)

```ts
store.configure({ strictMode: true });
```

When enabled:
- `.set()` and `.get()` will throw if the path doesn't exist yet
- Helps catch typos and unintended structure errors

---

## 🎮 In-Game Usage Examples

These are common real-world usage patterns:

### 🛒 Unlock shop when rich

```ts
store.onChange('player.gold', (val) => {
  if (val >= 1000) store.set('meta.shop.weaponUnlocked', true);
});
```

### 🧙 Award XP to a party member

```ts
const xp = store.get('partyMembers.mage.xp');
store.set('partyMembers.mage.xp', xp + 50);
```

### 🌱 Reset crop watering each morning

```ts
Object.entries(store.get('farm.plots')).forEach(([plotId]) => {
  store.set(`farm.plots.${plotId}.watered`, false);
});
```

> For full examples by genre, see the `example-*.mdc` files.

---

## 🔗 Related .mdc Files

### 📘 Core Plugin Docs

- [`overview.mdc`](./overview.mdc) – Plugin design philosophy and key patterns
- [`usage.mdc`](./usage.mdc) – API reference (this file)
- [`antipatterns.mdc`](./antipatterns.mdc) – Common mistakes and corrections
- [`todo.mdc`](./todo.mdc) – Pending features, polish goals, and roadmap

### 🎮 Examples by Genre

- [`example-visual-novel.mdc`](./example-visual-novel.mdc)
- [`example-turn-based-rpg.mdc`](./example-turn-based-rpg.mdc)
- [`example-farming-sim.mdc`](./example-farming-sim.mdc)
- [`example-roguelite.mdc`](./example-roguelite.mdc)
- [`example-deckbuilder.mdc`](./example-deckbuilder.mdc)
- [`example-idle-clicker.mdc`](./example-idle-clicker.mdc)
- [`example-metroidvania.mdc`](./example-metroidvania.mdc)

---

---

## 🧭 Instance vs Singleton – Which Store Pattern to Use?

The plugin recommends `new GlobalStore()` for maximum flexibility — but some projects may prefer a singleton for simplicity.

| Pattern | `new GlobalStore()` | Singleton (`globalStore`) |
|--------|---------------------|----------------------------|
| 🧪 Testable | ✅ Can create isolated stores per test | ❌ Shared global state complicates testing |
| 🧠 Explicit | ✅ You control lifecycle and scope | ❌ Hidden coupling between modules |
| 🛠 Integration | ✅ Can pass into systems, plugins | ❌ Must rely on shared import path |
| 🧩 Multi-store | ✅ Supports multiple stores (e.g. debug, multiplayer) | ❌ One store only |
| 🚀 Setup | Requires one line: `const store = new GlobalStore()` | Zero setup (if exported globally) |

> ✅ Use `new GlobalStore()` for most games  

> 🟡 You may add a global export if you prefer a singleton:
```ts
// optional helper
export const globalStore = new GlobalStore();
```


