---
description: 
globs: 
alwaysApply: false
---
---
id: global-store-usage
title: Global Store ‚Äì Usage & API
version: 0.2.2
category: phaser-plugin
status: active
---

> üìò This file documents all public methods and usage examples for `@robingamedev/global-store`.  
> For structured examples by genre (e.g., visual novel, puzzle, RPG), see `examples.mdc`.

---

## üöÄ Getting Started

```bash
npm install @robingamedev/global-store
```

```ts
// Import the singleton store (no setup required)
import globalStore from '@robingamedev/global-store';
```

> üîπ This plugin is designed to be used immediately ‚Äî no need to register it with Phaser.

---

## üõ† Basic API

```ts
// Set a value
globalStore.set('player.hp', 10);

// Get a value
const hp = globalStore.get('player.hp');

// Check if a key exists
if (globalStore.has('player.hp')) { ... }

// Delete a key
globalStore.delete('player.hp');

// Reset entire store (e.g., from a save file)
globalStore.reset({
  player: { hp: 5 },
  inventory: { coins: 20 }
});

// Export full store as plain object
const snapshot = globalStore.dump();
```

---

## ‚öôÔ∏è `configure(options)`

Use this to set developer options. Currently supports:

```ts
globalStore.configure({
  strictMode: true
});
```

| Case                      | strictMode = `true`       | strictMode = `false` |
|---------------------------|---------------------------|-----------------------|
| `set('', value)`          | Throws `InvalidKeyError`  | Logs warning, no-op   |
| `set('__proto__', value)` | Throws or blocks silently | Blocks silently       |
| `undefined` as value      | Allowed                   | Allowed               |

---

## üß† Namespace Helpers (Optional Pattern)

You can build your own namespaced helpers:

```ts
function ns(prefix: string) {
  return {
    set: (key: string, value: any) => globalStore.set(`${prefix}.${key}`, value),
    get: (key: string) => globalStore.get(`${prefix}.${key}`)
  };
}

const playerStore = ns('player');
playerStore.set('hp', 9);
```

---

## üîÅ Listen to Changes

```ts
function onGoldChange(newVal, oldVal) {
  console.log(`Gold changed from ${oldVal} ‚Üí ${newVal}`);
}

globalStore.onChange('inventory.gold', onGoldChange);

// Later (optional):
globalStore.offChange('inventory.gold', onGoldChange);
```

### TypeScript Example

```ts
globalStore.onChange<number>('player.hp', (newHp, oldHp) => {
  console.log(`HP changed from ${oldHp} to ${newHp}`);
});
```

> ‚ö†Ô∏è You are responsible for removing listeners when switching or destroying scenes.  
> Call `offChange()` in your scene‚Äôs `shutdown()` or `destroy()` method to avoid duplicate triggers or memory leaks.

---

### How Change Detection Works

`onChange()` only fires if the new value is **not the same** as the old value (via `!==`).

- ‚úÖ `store.set('x', 5)` ‚Üí fires if it wasn‚Äôt 5 before
- ‚úÖ `store.set('obj', { hp: 10 })` ‚Üí fires if object reference changes
- ‚ùå Mutating the same object ‚Üí does **not** fire automatically

```ts
const obj = globalStore.get('player.stats');
obj.hp = 90;
globalStore.set('player.stats', obj); // ‚úÖ Triggers

// ‚ùå This won't trigger:
globalStore.get('player.stats').hp = 90;
```

We recommend always replacing arrays/objects rather than mutating them in place.

---

### Listener Cleanup Pattern

When registering multiple listeners in a Phaser scene, track them in an array and remove during `shutdown`:

```ts
this._listeners = [
  ['player.hp', (val) => this.updateHp(val)],
  ['inventory.gold', (val) => this.updateGold(val)],
];

this._listeners.forEach(([key, fn]) => {
  globalStore.onChange(key, fn);
});

this.events.once('shutdown', () => {
  this._listeners.forEach(([key, fn]) => {
    globalStore.offChange(key, fn);
  });
});
```

You can also call:

```ts
globalStore.clearAllListeners();
```

To remove every active listener ‚Äî useful during scene transitions or for debugging.  
> This does not run automatically on `reset()` or scene change ‚Äî it‚Äôs up to you.

---

## üõ° Valid Keys (Strict Mode)

Global store keys follow a **dot-path structure** (e.g., `player.hp`, `settings.audio.volume`).

By default, most keys are accepted. In `strictMode`, the following rules apply:

- ‚ùå Empty string keys are disallowed
- ‚ùå Leading/trailing/consecutive dots (`..`) are disallowed
- ‚úÖ Dots, underscores, and dashes are allowed in key segments
- üòê Spaces or emoji are allowed, but will log warnings
- ‚ö†Ô∏è Deeply nested paths (>10 levels) will log a warning

### Reserved Keys

The following are blocked in `strictMode`:

- `__proto__`
- `constructor`
- `prototype`

These can break JavaScript objects or cause security issues and should never be used.

---

## üíæ Save/Load Integration

The global store is designed to work well with save systems like `@robingamedev/phaser-library-save-kit`.

```ts
// Saving
const state = globalStore.dump();
saveKit.saveToLocalStorage('slot1', state);

// Loading
const saved = saveKit.loadFromLocalStorage('slot1');
globalStore.reset(saved);
```

> State integration is left to the developer for flexibility.

---
